{
	"auto_complete":
	{
		"selected_items":
		[
		]
	},
	"buffers":
	[
		{
			"file": "main.py",
			"settings":
			{
				"buffer_size": 169,
				"line_ending": "Windows"
			}
		},
		{
			"file": "event.py",
			"settings":
			{
				"buffer_size": 7151,
				"line_ending": "Windows"
			}
		},
		{
			"contents": "import tools\nfrom player import carmine\n\n\nclass Controller(object):\n\n    def _parse(self, input):\n        \"\"\"Takes the ui frame string and returns a list of variables used\n        within the strings\"\"\"\n        result = []\n        count = 0\n\n        while True:\n            start = input.find('{', count)\n            count += start - count\n\n            # this accounts for possible format modifiers with ':'\n            end2 = input.find(':', count)\n            end = input.find('}', count)\n\n            # terminates if there's no more\n            if end == -1 or start == -1:\n                break\n            else:\n                count += (end - start)\n\n            # if a ':' was found, use it's position instead of '}'\n            if end2 < end and not end2 == -1:\n                end = end2\n\n            result.append(input[start+1:end])\n\n        return result\n\n    def _mkdict(self):\n        \"\"\"Takes the list generated by _parse and creates a dictionary that\n        fills in attributes from the player object or leaves a blank string\n        if the variables don't match anything in player.contents\"\"\"\n        # TO DO: This needs to be constantly run to update with the play object\n        # needs to pass by reference somehow :/\n        # Temp fix? Constant call whenever display() is needed\n        result = {}\n        fill = None\n\n        for item in self.fstrings:\n            fill = carmine.contents.get(item)\n\n            if fill is None:\n                fill = \"\"\n\n            result[item] = fill\n\n        self.fill = result\n\n    def load(self):\n        \"\"\"Loads in the ui frame file, creates the dictionary, and prepares the UI for\n        display formatting.\"\"\"\n        f = open(self.file, 'r')\n\n        for l in f.readlines():\n            self.frame += l\n\n            for entry in self._parse(l):\n                self.fstrings.append(entry)\n\n        f.close()\n\n        self._mkdict()\n\n    def display(self, text, length=75, clear=50):\n        \"\"\"Takes a given prompt and fills the ui lines for proper printing.\"\"\"\n        # TO DO: Fix hardcoded numbers\n        # This has to update player stats by rereading the whole dictionary\n        # every time :/\n        self._mkdict()\n        tools.clear(clear)\n        count = 1\n        find = 0\n        cont = False\n        working = text\n\n        while working:\n\n            # find a line break (if any) including up to the very possible end,\n            # hence the +1 anything beyond is certain to be a part of the next\n            # line\n            if '\\n' in working[:length+1]:\n                find = working.find('\\n')\n            else:\n                find = length\n\n            fillkey = 'line' + str(count)\n\n            # set the line# with the string that should be under the max\n            # character limit\n            if self.fill.get(fillkey) == \"\":\n                self.fill[fillkey] = working[:find]\n            else:\n                # if there is more text than available lines, we need\n                # another box\n                cont = True\n                break\n\n            # QUESTION, when break is called, it still removes the last\n            # used statement, HOW?\n            working = working[find:].lstrip('\\n')\n            count += 1\n\n        print self.frame.format(**self.fill)\n\n        if cont:\n            tools.next()\n            self.display(working)\n\n    def __init__(self, file='ui.txt'):\n        self.file = file\n        self.fill = {}\n        self.frame = \"\"\n        self.fstrings = []\n\n        self.load()\n\nprinter = Controller()\n",
			"file": "ui.py",
			"file_size": 3659,
			"file_write_time": 130862399650000000,
			"settings":
			{
				"buffer_size": 3536,
				"line_ending": "Windows"
			}
		},
		{
			"file": "sail.py",
			"settings":
			{
				"buffer_size": 3659,
				"line_ending": "Windows"
			}
		},
		{
			"file": "player.py",
			"settings":
			{
				"buffer_size": 1880,
				"line_ending": "Windows"
			}
		},
		{
			"file": "ui.txt",
			"settings":
			{
				"buffer_size": 443,
				"line_ending": "Windows"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 241.0,
		"last_filter": "git add",
		"selected_items":
		[
			[
				"git add",
				"Git: Add..."
			],
			[
				"git status",
				"Git: Status"
			],
			[
				"git commit",
				"Git: Commit"
			],
			[
				"git log",
				"Git: Log All"
			],
			[
				"comm",
				"Git: Commit"
			],
			[
				"usage",
				"Anaconda: Find object usage"
			],
			[
				"",
				"Anaconda: Goto object definition"
			],
			[
				"remove",
				"Package Control: Remove Package"
			],
			[
				"fold",
				"Fold Python : go to import"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"goot",
				"Anaconda: Goto object definition"
			],
			[
				"goto",
				"Anaconda: Goto object definition"
			],
			[
				"anaconda",
				"Anaconda: Find object usage"
			],
			[
				"python",
				"Anaconda: Set Python interpreter"
			],
			[
				"log",
				"Git: Log All"
			],
			[
				"add",
				"Git: Add Current File"
			],
			[
				"branch",
				"Git: New Branch"
			],
			[
				"check",
				"Git: Checkout Tag"
			],
			[
				"git",
				"Set Syntax: Git Graph"
			],
			[
				"instea",
				"Package Control: Install Package"
			],
			[
				"insta",
				"Package Control: Install Package"
			]
		],
		"width": 549.0
	},
	"console":
	{
		"height": 162.0,
		"history":
		[
			"import urllib.request,os,hashlib; h = 'eb2297e1a458f27d836c04bb0cbaf282' + 'd0e7a3098092775ccb37ca9d6b2e4b7d'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by) ",
			" import urllib.request,os,hashlib; h = 'eb2297e1a458f27d836c04bb0cbaf282' + 'd0e7a3098092775ccb37ca9d6b2e4b7d'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by) "
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/C/Users/Wingedillidan/Dropbox/Programming/lpthw/game"
	],
	"file_history":
	[
		"/C/Users/Wingedillidan/Dropbox/Programming/lpthw/game/event.py",
		"/C/Users/Wingedillidan/Dropbox/Programming/lpthw/game/ui.py",
		"/C/Users/Wingedillidan/Dropbox/Programming/lpthw/game/ui.txt",
		"/C/Users/Wingedillidan/AppData/Roaming/Sublime Text 3/Packages/Default/Preferences.sublime-settings",
		"/C/Users/Wingedillidan/AppData/Roaming/Sublime Text 3/Packages/User/Preferences.sublime-settings",
		"/C/Users/Wingedillidan/Dropbox/Programming/lpthw/game/new_file.py",
		"/C/Users/Wingedillidan/Dropbox/Programming/lpthw/game/sail.py",
		"/C/Users/Wingedillidan/Dropbox/Programming/lpthw/game/main.py"
	],
	"find":
	{
		"height": 35.0
	},
	"find_in_files":
	{
		"height": 0.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"display",
			"self.player",
			"player",
			":\n",
			"self.player, self.ui",
			"self.player",
			"int",
			"self.player",
			"self.player.change",
			"self.player, ui",
			"player",
			"self.player",
			"self.player, self.ui",
			", ",
			"len",
			"white",
			"whitespace",
			"msg_invalid",
			"\n            ",
			"            ",
			"x1",
			"fuel",
			"hp",
			"fuel",
			"self.hp"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 1,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "main.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 169,
						"regions":
						{
						},
						"selection":
						[
							[
								109,
								109
							]
						],
						"settings":
						{
							"history_list_is_closing": true,
							"syntax": "Packages/Python/Python.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "event.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7151,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "ui.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3536,
						"regions":
						{
						},
						"selection":
						[
							[
								3391,
								3391
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1598.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				}
			]
		},
		{
			"selected": 0,
			"sheets":
			[
				{
					"buffer": 3,
					"file": "sail.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3659,
						"regions":
						{
						},
						"selection":
						[
							[
								12,
								12
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "player.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1880,
						"regions":
						{
						},
						"selection":
						[
							[
								994,
								994
							]
						],
						"settings":
						{
							"history_list_is_closing": true,
							"syntax": "Packages/Python/Python.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 38.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "ui.txt",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 443,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"history_list_is_closing": true,
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 28.0
	},
	"input":
	{
		"height": 38.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			],
			[
				1,
				0,
				2,
				1
			]
		],
		"cols":
		[
			0.0,
			0.5,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.find_results":
	{
		"height": 0.0
	},
	"output.git":
	{
		"height": 130.0
	},
	"pinned_build_system": "",
	"project": "game.sublime-project",
	"replace":
	{
		"height": 52.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"ui.p",
				"ui.py"
			],
			[
				"ui",
				"ui.txt"
			],
			[
				"sail",
				"sail.py"
			],
			[
				"event",
				"event.py"
			],
			[
				"ui.t",
				"ui.txt"
			],
			[
				"",
				"ui.py"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 73.0,
		"last_filter": "ship",
		"selected_items":
		[
			[
				"ship",
				"Ship"
			],
			[
				"change",
				"change"
			]
		],
		"width": 490.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 188.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
